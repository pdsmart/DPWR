#!/bin/bash
#########################################################################################################
##
## Name:            startDPWRinDocker
## Created:         November 2019
## Author(s):       Philip Smart
## Description:     A modified shell script to start the dPWR controller within a docker container.
##
## Credits:         
## Copyright:       (c) 2015-2019 Philip Smart <philip.smart@net2net.org>
##
## History:         September 2015   - Initial module written.
##                  November 2019    - Adapted for docker.
##
#########################################################################################################
## This source file is free software: you can redistribute it and#or modify
## it under the terms of the GNU General Public License as published
## by the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
##
## This source file is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
##
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.
#########################################################################################################

#-----------------------------------------------------------
# start script for the DPWR server
#-----------------------------------------------------------
export SYSTEM=`uname`
export PACKAGE=DPWR
if [ "${SYSTEM}" = "Linux" ]; then
    export BASEDIR=/usr/local/${PACKAGE}
else
    export BASEDIR=/usr/local/${PACKAGE}
fi
. /etc/profile
. ${BASEDIR}/etc/${PACKAGE}.shc

# Create virtual ports as dPWR ATMEGA expects to communicate with a serial port. If needed you can connect
# to the serial port via the container port forwarding.
for i in {0..4}
do
    socat  pty,link=/dev/vcom${i},raw  tcp4-listen:1000${i} &
done

# Ok, launch the program without spawning, exit means exit container so the original script 
# could not be used in the container.
cd $ETCDIR
sleep 3

#-----------------------------------------------------------
COMMAND="${BINDIR}/dpwr $@"

echo "Starting $COMMAND $*"
${BASEDIR}/etc/forever $COMMAND $*
#-----------------------------------------------------------
echo "Done."
